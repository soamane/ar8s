#include "event_handler.hpp"
#include "../../bot/executor/bot_executor.hpp"

EventHandler::EventHandler(TgBot::Bot& bot, std::shared_ptr<UserData> userData)
    : m_bot(bot), m_user(userData), m_messageHandler(std::make_shared<MessageHandler>(bot, userData)),
    m_inputProcessor(std::make_unique<InputProcessor>(userData)) { }

void EventHandler::Handle() {
    m_messageHandler->SendChatMessage("‚ö†Ô∏è –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –í—ã –¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ, —á—Ç–æ –Ω–µ –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö.");
    m_messageHandler->SendChatMessage("üì≤ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ª—é–±–æ–º —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n*–ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤.");

    InitEvents();
}

void EventHandler::InitEvents() {
    RegisterClearCommand();
    RegisterStopCommand();
    RegisterHelpCommand();
    RegisterExecuteCommand();
    RegisterNonCommandMessageEvent();
}

void EventHandler::RegisterClearCommand() {
    onCommandEvent("clear", [this](TgBot::Message::Ptr message)
    {
        if (!ValidateUserData()) return;
        m_user->input->status->clear();
        m_messageHandler->SendChatMessage("‚ôª –í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å—Ç—ë—Ä—Ç—ã. –£–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ.");
    });
}

void EventHandler::RegisterStopCommand() {
    onCommandEvent("stop", [this](TgBot::Message::Ptr message)
    {
        if (!m_user->executor->attackInProgress) {
            m_messageHandler->SendChatMessage("‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω–µ–ª—å–∑—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–µ–π—á–∞—Å.");
            return;
        }
        m_user->executor->attackStopped = true;
        m_user->input->status->clear();
        m_messageHandler->SendChatMessage("üö´ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω.");
    });
}

void EventHandler::RegisterHelpCommand() {
    onCommandEvent("help", [this](TgBot::Message::Ptr message)
    {
        m_messageHandler->SendChatMessage("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞");
        m_messageHandler->SendChatMessage("/help - –≤—ã–∑–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n/execute - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞—Ç–∞–∫—É (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã)\n/stop - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–ø–∞–º-–∞—Ç–∞–∫–∏");
    });
}

void EventHandler::RegisterExecuteCommand() {
    onCommandEvent("execute", [this](TgBot::Message::Ptr message)
    {
        if (!ValidateUserData())
            return;

        if (m_user->executor->attackInProgress) {
            m_messageHandler->SendChatMessage("‚ùå –ê—Ç–∞–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞");
            m_messageHandler->SendChatMessage("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop –¥–ª—è –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è");
            return;
        }

        std::thread([this]
        {
            BotExecutor(m_user, m_messageHandler).Execute();
        }).detach();
    });
}

void EventHandler::RegisterNonCommandMessageEvent() {
    onNonCommandMessageEvent([this](TgBot::Message::Ptr message)
    {
        if (!m_user->input->status->phoneEntered) {
            if (!m_inputProcessor->ProcessPhoneNumber(message->text)) {
                m_messageHandler->SendChatMessage("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞...");
                return;
            }
            m_messageHandler->SendChatMessage("üì≤ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å—á–∏—Ç–∞–Ω.");
            m_messageHandler->SendChatMessage("‚è≥ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–ª—è –∞—Ç–∞–∫–∏. –£—á—Ç–∏—Ç–µ, —á—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100");
        } else if (!m_user->input->status->attackTimeEntered) {
            if (!m_inputProcessor->ProcessAttackTime(message->text)) {
                m_messageHandler->SendChatMessage("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.");
                return;
            }
            m_messageHandler->SendChatMessage("üé≤ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–ª—è –∞—Ç–∞–∫–∏: " + std::to_string(m_user->input->attackTime));
            m_messageHandler->SendChatMessage("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–ø–∞–º –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /execute");
        }
    });
}

bool EventHandler::ValidateUserData() const {
    if (!m_user->isInitialized()) {
        m_messageHandler->SendChatMessage("‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω–µ–ª—å–∑—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–µ–π—á–∞—Å.");
        return false;
    }
    return true;
}

void EventHandler::onCommandEvent(std::string_view command, std::function<void(TgBot::Message::Ptr message)> func) {
    m_bot.getEvents().onCommand(command.data(), std::move(func));
}

void EventHandler::onNonCommandMessageEvent(std::function<void(TgBot::Message::Ptr message)> func) {
    m_bot.getEvents().onNonCommandMessage(std::move(func));
}
