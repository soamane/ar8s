#include "event_handler.hpp"

#include "../chat/input/handler/phone/phone_handler.hpp"
#include "../chat/input/validator/string/string_validator.hpp"

#include "../../parser/service/parser/service_parser.hpp"
#include "../../parser/settings/parser/settings_parser.hpp"

#include "../../executor/Executor.hpp"

#include <thread>
#include <iostream>

EventHandler::EventHandler(TgBot::Bot& bot) : m_bot(bot), m_messageHandler(std::make_unique<MessageHandler>(bot)) { }

void EventHandler::CreateEvents() {
    OnCommandEvent("start", [this](TgBot::Message::Ptr message)
    {
        auto& user = this->m_users[message->chat->id];
        if (user.inputStatus.phoneEntered || user.inputStatus.attacksEntered) {
            user.inputStatus.clear();
            this->m_messageHandler->SendChatMessage(message->chat->id, "–í–∏–¥–∏–º–æ, –≤—ã —É–∂–µ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–ø–∞–º –∞—Ç–∞–∫–∏.\n\n–í—ã –±—ã –≤—Ä—è–¥–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É —Å–Ω–æ–≤–∞, –ø–æ—ç—Ç–æ–º—É —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≤—ã —á—Ç–æ-—Ç–æ —É–ø—É—Å—Ç–∏–ª–∏. –ú—ã —Å—Ç—ë—Ä–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á—Ç–æ–±—ã –≤—ã —Å–º–æ–≥–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–µ!");
        }
        this->m_messageHandler->SendChatMessage(message->chat->id, "üí¨ –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Ç–µ–±—è —Ñ–æ—Ä–º–∞—Ç–µ.\n\n–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã, –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ —Ä–∞–±–æ—Ç—É –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.");
    });

    OnCommandEvent("execute", [this](TgBot::Message::Ptr message)
    {
        const auto& user = this->m_users[message->chat->id];
        if (!user.inputStatus.phoneEntered || !user.inputStatus.attacksEntered) {
            this->m_messageHandler->SendErrorMessage(message->chat->id, message->messageId, "‚ö†Ô∏è –¢—ã –Ω–µ –º–æ–∂–µ—à—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Å–µ–π—á–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.");
            return;
        }

        this->LaunchAttack(message->chat->id, message);
    });

    OnAnyMessageEvent([this](TgBot::Message::Ptr message)
    {
        if (StringTools::startsWith(message->text, "/")) {
            return;
        }

        try {
            this->HandleUserMessage(message);
        } catch (const std::exception& e) {
            std::cerr << "Failed to handle user message: " << e.what() << std::endl;
        }
    });
}

void EventHandler::HandleUserMessage(TgBot::Message::Ptr message) {
    const auto& user = this->m_users[message->chat->id];
    if (!user.inputStatus.phoneEntered) {
        this->ProcessPhoneNumber(message);
    } else if (!user.inputStatus.attacksEntered) {
        this->ProcessAttackCount(message);
    }
}

void EventHandler::LaunchAttack(int64_t chatId, TgBot::Message::Ptr message) {
    auto& user = this->m_users[message->chat->id];
    if (user.executorStatus.attackInProgress) {
        this->m_messageHandler->SendErrorMessage(chatId, static_cast<int32_t>(message->chat->id), "‚ö†Ô∏è –ê—Ç–∞–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –í–∞–º –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É –∂–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è");
        return;
    }

    this->m_messageHandler->SendChatMessage(chatId, "üöÄ –ê—Ç–∞–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –Ω–æ–º–µ—Ä: +7" + user.input.phone + "\n\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞. –í–∞–º –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç —Å—Ä–∞–∑—É –∂–µ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è");

    user.executorStatus.attackInProgress = true;
    std::thread([=]()
    {
        this->PerformExecutor(chatId, message);
        this->m_users.erase(message->chat->id);
    }).detach();
}

void EventHandler::ProcessPhoneNumber(TgBot::Message::Ptr message) {
    if (!StringValidator::IsRussianPhoneNumber(message->text)) {
        this->m_messageHandler->SendErrorMessage(message->chat->id, message->messageId, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É. –í —Å–ª—É—á–∞–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: @soamane");
        return;
    }

    auto& user = this->m_users[message->chat->id];
    user.input.phone = PhoneHandler::FormatPhoneNumber(message->text);
    if (user.input.phone.empty()) {
        throw std::runtime_error("Failed to format input phone number");
    }

    user.inputStatus.phoneEntered = !user.input.phone.empty();

    if (user.inputStatus.phoneEntered) {
        this->m_messageHandler->SendChatMessage(message->chat->id, "üì≤ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å—á–∏—Ç–∞–Ω.\n\n‚è≥ –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π. –£—á—Ç–∏—Ç–µ, —á—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100");
    } else {
        this->m_messageHandler->SendErrorMessage(message->chat->id, message->messageId, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É. –í —Å–ª—É—á–∞–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: @soamane");
    }

}

void EventHandler::ProcessAttackCount(TgBot::Message::Ptr message) {
    auto& user = this->m_users[message->chat->id];
    if (!StringValidator::IsDigitOnly(message->text)) {
        this->m_messageHandler->SendErrorMessage(message->chat->id, message->messageId, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n\n–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –í —Å–ª—É—á–∞–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: @soamane");
        return;
    }

    try {
        user.input.attacksCount = std::stoi(message->text);
        if (user.input.attacksCount < 1 || user.input.attacksCount > 100) {
            this->m_messageHandler->SendErrorMessage(message->chat->id, message->messageId, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100.\n\n–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –í —Å–ª—É—á–∞–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: @soamane");
            return;
        }

        user.inputStatus.attacksEntered = true;
        this->m_messageHandler->SendChatMessage(message->chat->id, "üé≤ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞—Ç–∞–∫–∏: " + std::to_string(user.input.attacksCount) + "\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–ø–∞–º –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /execute");
    } catch ([[maybe_unused]] const std::exception& e) {
        this->m_messageHandler->SendErrorMessage(message->chat->id, message->messageId, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.\n\n–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –í —Å–ª—É—á–∞–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: @soamane");
    }
}

void EventHandler::PerformExecutor(int64_t chatId, TgBot::Message::Ptr message) {
    const std::filesystem::path settingsPath = "configs\\settings.json";
    const std::filesystem::path servicesPath = "configs\\services.json";

    try {
        SettingsParser settingsParser(settingsPath);
        Settings& settings = settingsParser.GetSettings();
        {
            auto& user = this->m_users[message->chat->id];
            settings.phoneNumber = user.input.phone;
            settings.attacksCount = user.input.attacksCount;
        }

        ServiceParser serviceParser(settings, servicesPath);
        const std::vector<Service>& services = serviceParser.GetServices();

        std::unique_ptr<Executor> executor = std::make_unique<Executor>(settings, services);
        executor->Execute();

        this->m_messageHandler->SendChatMessage(chatId, "‚úÖ –ê—Ç–∞–∫–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–ø–∞–º-—Å–µ—Ä–≤–∏—Å–æ–≤: " + std::to_string(services.size()) + "\n\n–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start");
    } catch (const std::exception& e) {
        std::cerr << "Execution exception: " << e.what() << std::endl;
        this->m_messageHandler->SendChatMessage(chatId, "‚ùå –ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞—Ç–∞–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–¥–Ω–µ–µ. –í —Å–ª—É—á–∞–µ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: @soamane");
    }
}

void EventHandler::CreateListenerLoop() {
    TgBot::TgLongPoll longPoll(this->m_bot);
    while (true) {
        try {
            longPoll.start();
        } catch (const TgBot::TgException& e) {
            std::cerr << "TgBot LongPoll exception: " << e.what() << std::endl;
            std::this_thread::sleep_for(std::chrono::seconds(3));
        }
    }
}

void EventHandler::OnAnyMessageEvent(std::function<void(TgBot::Message::Ptr)> function) {
    this->m_bot.getEvents().onAnyMessage(std::move(function));
}

void EventHandler::OnCommandEvent(std::string_view command, std::function<void(TgBot::Message::Ptr)> function) {
    this->m_bot.getEvents().onCommand(command.data(), std::move(function));
}
