#include "event_handler.hpp"
#include "../chat/input/handler/phone/phone_handler.hpp"
#include "../chat/input/validator/string/string_validator.hpp"

#include <thread>
#include <iostream>
#include <memory>

EventHandler::EventHandler(TgBot::Bot& bot)
    : m_bot(bot), m_messageHandler(bot),
    m_inputProcessor(m_messageHandler), m_botExecutor(m_messageHandler) { }

void EventHandler::CreateEvents() {
    OnCommandEvent("start", [this](TgBot::Message::Ptr message)
    {
        auto& user = m_users[message->chat->id];
        user.chatId = message->chat->id;

        if (user.inputStatus.phoneEntered || user.inputStatus.attacksEntered) {
            user.clear();
            m_messageHandler.SendChatMessage(user.chatId,
                "–í–∏–¥–∏–º–æ, –≤—ã —É–∂–µ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–ø–∞–º –∞—Ç–∞–∫–∏.\n\n"
                "–ú—ã —Å—Ç—ë—Ä–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–µ!");
        }

        m_messageHandler.SendChatMessage(user.chatId,
            "üí¨ –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Ç–µ–±—è —Ñ–æ—Ä–º–∞—Ç–µ.\n\n"
            "–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã.");
    });

    OnCommandEvent("execute", [this](TgBot::Message::Ptr message)
    {
        auto& user = m_users[message->chat->id];
        if (!user.inputStatus.phoneEntered || !user.inputStatus.attacksEntered) {
            m_messageHandler.SendErrorChatMessage(user.chatId, message->messageId,
                "‚ö†Ô∏è –¢—ã –Ω–µ –º–æ–∂–µ—à—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Å–µ–π—á–∞—Å.");
            return;
        }

        LaunchAttackEvent(user);
    });

    OnCommandEvent("stop", [this](TgBot::Message::Ptr message)
    {
        auto& user = m_users[message->chat->id];
        if (user.executorStatus.attackInProgress) {
            user.executorStatus.attackStopped = true;
            m_messageHandler.SendChatMessage(user.chatId, "üõë –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∞—Ç–∞–∫–∏ –ø—Ä–∏–Ω—è—Ç.");
        } else {
            m_messageHandler.SendErrorChatMessage(user.chatId, message->messageId,
                "‚ö†Ô∏è –¢—ã –Ω–µ –º–æ–∂–µ—à—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Å–µ–π—á–∞—Å.");
        }
    });

    OnAnyMessageEvent([this](TgBot::Message::Ptr message)
    {
        if (!StringTools::startsWith(message->text, "/")) {
            HandleUserMessage(message);
        }
    });
}

void EventHandler::HandleUserMessage(TgBot::Message::Ptr message) {
    auto& user = m_users[message->chat->id];
    if (!user.inputStatus.phoneEntered) {
        m_inputProcessor.ProcessPhoneNumber(user, message);
    } else if (!user.inputStatus.attacksEntered) {
        m_inputProcessor.ProcessAttackCount(user, message);
    }
}

void EventHandler::LaunchAttackEvent(UserData& user) {
    if (user.executorStatus.attackInProgress) {
        m_messageHandler.SendChatMessage(user.chatId, "‚ö†Ô∏è –ê—Ç–∞–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.");
        return;
    }

    m_messageHandler.SendChatMessage(user.chatId,
        "üöÄ –ê—Ç–∞–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –Ω–æ–º–µ—Ä: +7" + user.input.phone +
        "\n\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞.");

    user.executorStatus.attackInProgress = true;
    std::thread([this, userChatId = user.chatId, &user]()
     {
         m_botExecutor.ExecuteForUser(user);
         user.executorStatus.attackInProgress = false;

         std::lock_guard<std::mutex> lock(this->m_mutex);
         m_users.erase(userChatId);
    }).detach();
}

void EventHandler::OnAnyMessageEvent(std::function<void(TgBot::Message::Ptr)> function) {
    m_bot.getEvents().onAnyMessage(std::move(function));
}

void EventHandler::OnCommandEvent(std::string_view command, std::function<void(TgBot::Message::Ptr)> function) {
    m_bot.getEvents().onCommand(command.data(), std::move(function));
}
